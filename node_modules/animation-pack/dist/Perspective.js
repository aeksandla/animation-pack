(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 492:
/***/ (function(__unused_webpack_module, exports) {


var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Perspective = void 0;
var PERSPECTIVE_OPTIONS = {
    maxRotateX: 10,
    maxRotateY: 10,
    perspective: 1000,
    resetTransition: '.4s',
};
var Perspective = /** @class */ (function () {
    function Perspective(element, options) {
        var _this = this;
        this.move = function (e) {
            var targetCoords = _this.element.getBoundingClientRect();
            var xCoord = (e.clientX - targetCoords.left - targetCoords.width / 2) / (targetCoords.width / 2);
            var yCoord = (e.clientY - targetCoords.top - targetCoords.height / 2) / (targetCoords.height / 2);
            _this.element.style.transform = "perspective(".concat(_this.options.perspective, "px) rotateX(").concat(yCoord * _this.options.maxRotateY, "deg) rotateY(").concat(-xCoord * _this.options.maxRotateX, "deg) scale3d(0.98, 0.98, 0.98)");
        };
        this.reset = function () {
            _this.element.style.transition = "transform ".concat(_this.options.resetTransition);
            _this.element.style.transform = _this.initialTransform;
            setTimeout(function () { return _this.element.style.transition = 'none'; }, 100);
        };
        this.options = __assign(__assign({}, PERSPECTIVE_OPTIONS), options);
        this.initialTransform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) scale3d(0.98, 0.98, 0.98)';
        this.element = element;
        element.addEventListener('mousemove', this.move);
        element.addEventListener('mouseout', this.reset);
    }
    return Perspective;
}());
exports.Perspective = Perspective;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[492](0, __webpack_exports__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});